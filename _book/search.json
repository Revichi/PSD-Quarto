[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Proyek Sain Data",
    "section": "",
    "text": "Preface\nRice (Cammeo and Osmancik)"
  },
  {
    "objectID": "index.html#link-streamlit",
    "href": "index.html#link-streamlit",
    "title": "Proyek Sain Data",
    "section": "Link Streamlit",
    "text": "Link Streamlit\nAPP :https://mz9oumfmv8ixfyj22i6ob2.streamlit.app/"
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Proyek Sain Data",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nBlah, blah, blah…"
  },
  {
    "objectID": "Rice_PSD.html#business-understanding",
    "href": "Rice_PSD.html#business-understanding",
    "title": "1  Rice (Cammeo and Osmancik)",
    "section": "1.1 Business Understanding",
    "text": "1.1 Business Understanding\n\nTujuan: Membangun model klasifikasi untuk mengidentifikasi jenis biji beras (Cammeo dan Osmancik) berdasarkan fitur-fitur tertentu.\nManfaat: Memberikan alat identifikasi biji beras yang dapat membantu dalam pemisahan dan pengenalan jenis beras."
  },
  {
    "objectID": "Rice_PSD.html#data-understanding",
    "href": "Rice_PSD.html#data-understanding",
    "title": "1  Rice (Cammeo and Osmancik)",
    "section": "1.2 Data Understanding",
    "text": "1.2 Data Understanding\nDatasetyang diguanakan adalah dataset Rice (Cammeo and Osmancik) dengan atribut seperti Area, Perimeter, Major Axis Length, Minor Axis Length, Eccentricity, Convex Area, Extent, dan Class (jenis beras).\n\n1.2.1 Penjelasan atribut\nBerikut ini adalah penjelasan atribut atribut yang digunakan pada dataset:\n\nArea (Luas): Mengembalikan jumlah piksel dalam batas biji beras. Ini mengukur luas daerah biji beras dalam piksel.\nPerimeter (Keliling): Menghitung keliling dengan mengukur jarak antara piksel di sekitar batas biji beras. Ini memberikan panjang keliling biji beras dalam piksel.\nMajor Axis Length (Panjang Sumbu Utama): Garis terpanjang yang dapat digambar pada biji beras, yaitu jarak sumbu utama. Ini mengukur panjang garis terpanjang pada biji beras dalam piksel.\nMinor Axis Length (Panjang Sumbu Kecil): Garis terpendek yang dapat digambar pada biji beras, yaitu jarak sumbu kecil. Ini mengukur panjang garis terpendek pada biji beras dalam piksel.\nEccentricity (Eksentrisitas): Mengukur seberapa bulat elips yang memiliki momen yang sama dengan biji beras. Ini memberikan informasi tentang seberapa bulat biji beras, di mana nilai mendekati 0 menandakan elips yang lebih bulat.\nConvex Area (Luas Cembung): Mengembalikan jumlah piksel dari cangkang cembung terkecil dari wilayah yang dibentuk oleh biji beras. Ini mengukur luas area cembung dalam piksel.\nExtent (Ketertelusuran): Mengembalikan rasio wilayah yang dibentuk oleh biji beras terhadap piksel kotak pembatas. Ini memberikan informasi tentang seberapa banyak area yang diisi oleh biji beras dalam kotak pembatasnya.\nClass (Kelas): Jenis beras, misalnya, Cammeo dan Osmancik. Ini adalah label kategoris yang menunjukkan jenis atau kelas dari biji beras yang diamati.\n\n\n\n1.2.2 Library\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.preprocessing import MinMaxScaler\n\n\n\n\n1.2.3 Install dataset\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\nMounted at /content/drive\n\n\n\npip install ucimlrepo\n\nCollecting ucimlrepo\n  Downloading ucimlrepo-0.0.3-py3-none-any.whl (7.0 kB)\nInstalling collected packages: ucimlrepo\nSuccessfully installed ucimlrepo-0.0.3\n\n\n\nfrom ucimlrepo import fetch_ucirepo\n\n# fetch dataset\nrice_cammeo_and_osmancik = fetch_ucirepo(id=545)\n\n# data (as pandas dataframes)\nX = rice_cammeo_and_osmancik.data.features\ny = rice_cammeo_and_osmancik.data.targets\n\n# metadata\nprint(rice_cammeo_and_osmancik.metadata)\n\n# variable information\nprint(rice_cammeo_and_osmancik.variables)\n\n{'uci_id': 545, 'name': 'Rice (Cammeo and Osmancik)', 'repository_url': 'https://archive.ics.uci.edu/dataset/545/rice+cammeo+and+osmancik', 'data_url': 'https://archive.ics.uci.edu/static/public/545/data.csv', 'abstract': \"A total of 3810 rice grain's images were taken for the two species, processed and feature inferences were made. 7 morphological features were obtained for each grain of rice.\", 'area': 'Biology', 'tasks': ['Classification'], 'characteristics': ['Multivariate'], 'num_instances': 3810, 'num_features': 7, 'feature_types': ['Real'], 'demographics': [], 'target_col': ['Class'], 'index_col': None, 'has_missing_values': 'no', 'missing_values_symbol': None, 'year_of_dataset_creation': 2019, 'last_updated': 'Fri Nov 03 2023', 'dataset_doi': '10.24432/C5MW4Z', 'creators': [], 'intro_paper': {'title': 'Classification of Rice Varieties Using Artificial Intelligence Methods', 'authors': 'Ilkay Cinar, M. Koklu', 'published_in': 'International Journal of Intelligent Systems and Applications in Engineering', 'year': 2019, 'url': 'https://www.semanticscholar.org/paper/4e508bb906c8fdc04ead6f20bd8918fcb3605d1c', 'doi': '10.18201/ijisae.2019355381'}, 'additional_info': {'summary': \"Among  the certified rice grown in TURKEY,  the  Osmancik species, which has a large planting area since 1997 and the Cammeo species grown since 2014 have been selected for the study.  When  looking  at  the  general  characteristics  of  Osmancik species, they have a wide, long, glassy and dull appearance.  When looking at the general characteristics of the Cammeo species, they have wide and long, glassy and dull in appearance.  A total of 3810 rice grain's images were taken for the two species, processed and feature inferences were made. 7 morphological features were obtained for each grain of rice. \", 'purpose': None, 'funded_by': None, 'instances_represent': None, 'recommended_data_splits': None, 'sensitive_data': None, 'preprocessing_description': None, 'variable_info': '1.) Area: Returns  the  number  of  pixels  within  the boundaries of the rice grain.\\r\\n2.) Perimeter: Calculates the circumference by calculating  the  distance  between  pixels around the boundaries of the rice grain.\\r\\n3.) Major Axis Length: The longest line that can be drawn on the rice  grain,  i.e.  the  main  axis  distance, gives.\\r\\n4.) Minor Axis Length: The shortest line that can be drawn on the rice  grain,  i.e.  the  small  axis  distance, gives.\\r\\n5.) Eccentricity: It measures how round the ellipse, which has  the  same  moments  as  the  rice  grain, is.\\r\\n6.) Convex Area: Returns  the  pixel  count  of  the  smallest convex shell of the region formed by the rice grain.\\r\\n7.) Extent: Returns the ratio of the regionformed by the rice grain to the bounding box pixels.\\r\\n8.) Class: Cammeo and Osmancik rices', 'citation': None}}\n                name     role        type demographic  \\\n0               Area  Feature     Integer        None   \n1          Perimeter  Feature  Continuous        None   \n2  Major_Axis_Length  Feature  Continuous        None   \n3  Minor_Axis_Length  Feature  Continuous        None   \n4       Eccentricity  Feature  Continuous        None   \n5        Convex_Area  Feature     Integer        None   \n6             Extent  Feature  Continuous        None   \n7              Class   Target      Binary        None   \n\n                                         description units missing_values  \n0  Returns the number of pixels within the bounda...    px             no  \n1  Calculates the circumference by calculating th...    px             no  \n2  The longest line that can be drawn on the rice...  None             no  \n3  The shortest line that can be drawn on the ric...  None             no  \n4  It measures how round the ellipse, which has t...  None             no  \n5  Returns the pixel count of the smallest convex...  None             no  \n6  Returns the ratio of the region formed by the ...  None             no  \n7                                Cammeo and Osmancik  None             no  \n\n\n\nimport pandas as pd\n\n# Memuat file CSV\ndf = pd.read_csv('https://archive.ics.uci.edu/static/public/545/data.csv')\n\n# Menampilkan tabel\ndf\n\n\n  \n    \n\n\n\n\n\n\nArea\nPerimeter\nMajor_Axis_Length\nMinor_Axis_Length\nEccentricity\nConvex_Area\nExtent\nClass\n\n\n\n\n0\n15231\n525.578979\n229.749878\n85.093788\n0.928882\n15617\n0.572896\nCammeo\n\n\n1\n14656\n494.311005\n206.020065\n91.730972\n0.895405\n15072\n0.615436\nCammeo\n\n\n2\n14634\n501.122009\n214.106781\n87.768288\n0.912118\n14954\n0.693259\nCammeo\n\n\n3\n13176\n458.342987\n193.337387\n87.448395\n0.891861\n13368\n0.640669\nCammeo\n\n\n4\n14688\n507.166992\n211.743378\n89.312454\n0.906691\n15262\n0.646024\nCammeo\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3805\n11441\n415.858002\n170.486771\n85.756592\n0.864280\n11628\n0.681012\nOsmancik\n\n\n3806\n11625\n421.390015\n167.714798\n89.462570\n0.845850\n11904\n0.694279\nOsmancik\n\n\n3807\n12437\n442.498993\n183.572922\n86.801979\n0.881144\n12645\n0.626739\nOsmancik\n\n\n3808\n9882\n392.296997\n161.193985\n78.210480\n0.874406\n10097\n0.659064\nOsmancik\n\n\n3809\n11434\n404.709992\n161.079269\n90.868195\n0.825692\n11591\n0.802949\nOsmancik\n\n\n\n\n\n3810 rows × 8 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nX = df.drop(['Class'], axis=1)\ny = df[\"Class\"]\n\n\n\n1.2.4 Missing value\nCek apakah ada missing value pada dataset\n\nprint(X.isnull().sum())  # Menampilkan jumlah missing value untuk setiap kolom\n\nArea                 0\nPerimeter            0\nMajor_Axis_Length    0\nMinor_Axis_Length    0\nEccentricity         0\nConvex_Area          0\nExtent               0\ndtype: int64\n\n\n\n\n1.2.5 Visualisasi\n\nsns.countplot(data=df, x='Class')\nplt.title('Jumlah Data pada Setiap Kelas')\nplt.xlabel('Kelas (Class)')\nplt.ylabel('Jumlah Data')\nplt.show()\n\n# Menghitung jumlah data pada setiap kelas secara langsung\nclass_counts = df['Class'].value_counts()\n\n# Menampilkan jumlah data pada setiap kelas\nprint('Jumlah Data pada Setiap Kelas:')\nprint(class_counts)\n\n\n\n\nJumlah Data pada Setiap Kelas:\nOsmancik    2180\nCammeo      1630\nName: Class, dtype: int64\n\n\nPada distribusi class ini, terlihat bahwa class cameo memiliki data sebanyak 1630 lebih sedikit dari pada class osmancik yaitu sebanyak 2180\n\n\n1.2.6 Seleksi Fitur\nSeleksi fitur adalah langkah penting dalam pemrosesan data untuk meningkatkan kinerja model dan mengurangi overfitting. ANOVA (Analysis of Variance) digunakan untuk mengukur perbedaan rata-rata antara dua atau lebih kelompok. Dalam konteks ini, kita akan menggunakan ANOVA untuk memilih fitur-fitur terbaik yang paling berpengaruh terhadap klasifikasi jenis biji beras.\nLangkah-langkah:\n\nMenentukan Banyaknya Fitur (N): Pertama, kita perlu menentukan jumlah total fitur dalam dataset.\nMenentukan Jumlah Fitur Terbaik (K): Kita juga perlu menentukan jumlah fitur terbaik yang ingin kita pilih. Dalam contoh ini, K diatur menjadi 6.\nInisialisasi Selector: Menggunakan SelectKBest dari scikit-learn dengan fungsi skor ANOVA (f_classif) dan jumlah fitur terbaik (K) yang telah ditentukan.\n\n\n\n\n# Menentukan banyaknya fitur (N)\ntotal_features = len(X.columns)\n\n# Menentukan jumlah fitur terbaik (K)\nk_best_features = 6\n\n# Inisialisasi Selector\nselector = SelectKBest(score_func=f_classif, k=k_best_features)\n\n\n# Lakukan seleksi fitur\nselector.fit(X, y)\n\nSelectKBest(k=6)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.SelectKBestSelectKBest(k=6)\n\n\n\n# Tampilkan hasil seleksi fitur\n# Jumlah fitur terbaik yang terpilih disesuaikan dengan nilai K di atas\nselected_features = selector.get_support(indices=True)\nfeature_names = X.columns\n\n# Pilih nama-nama fitur yang dipilih\nselected_feature_names = [feature_names[i] for i in selected_features]\n\n# Hitung skor statistik untuk setiap fitur\nscores = selector.scores_[selected_features]\n\n# Membuat bar chart\nplt.figure(figsize=(10, 6))\nplt.bar(selected_feature_names, scores, color='skyblue')\nplt.xlabel('Fitur')\nplt.ylabel('Skor Statistik')\nplt.title('Skor Statistik untuk Fitur-Fitur Terpilih')\nplt.xticks(rotation=45)\nplt.tight_layout()\n\n# Menampilkan grafik\nplt.show()\n\n\n\n\n\n# Pilih hanya fitur-fitur terbaik\nX_selected = X[selected_feature_names]\n\nRumus ANOVA: \\[\nF = \\frac{MSB}{MSW}\n\\] MSB atau mean square antar kelompok (mean square between groups). dapat dari rumus ini :\n\\[\nMSB = \\frac{\\sum_{i=1}^{k} n_i (\\bar{X}_i - \\bar{X}_{\\text{total}})^2}{k - 1}\n\\] dan MSW atau mean square dalam kelompok (mean square within groups)\n\\[\nMSW = \\frac{\\sum_{i=1}^{k} \\sum_{j=1}^{n_i} (X_{ij} - \\bar{X}_i)^2}{N - k}\n\\]\n\n# Menampilkan dataset yang sudah dipilih hanya dengan fitur-fitur terbaik\nX_selected.head()\n\n\n  \n    \n\n\n\n\n\n\nArea\nPerimeter\nMajor_Axis_Length\nMinor_Axis_Length\nEccentricity\nConvex_Area\n\n\n\n\n0\n15231\n525.578979\n229.749878\n85.093788\n0.928882\n15617\n\n\n1\n14656\n494.311005\n206.020065\n91.730972\n0.895405\n15072\n\n\n2\n14634\n501.122009\n214.106781\n87.768288\n0.912118\n14954\n\n\n3\n13176\n458.342987\n193.337387\n87.448395\n0.891861\n13368\n\n\n4\n14688\n507.166992\n211.743378\n89.312454\n0.906691\n15262\n\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\nuntuk membuang fitur yang skor statistik nya rendah"
  },
  {
    "objectID": "Rice_PSD.html#preprocesing-data",
    "href": "Rice_PSD.html#preprocesing-data",
    "title": "1  Rice (Cammeo and Osmancik)",
    "section": "1.3 Preprocesing Data",
    "text": "1.3 Preprocesing Data\n\n1.3.1 Split data\n\nfrom sklearn.model_selection import train_test_split\n\n# Pembagian data menjadi data latih dan data uji (80% data latih, 20% data uji)\nX_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)\n\n\nX_train.shape\n\n(3048, 6)\n\n\n\ny_train\n\n3644    Osmancik\n3418    Osmancik\n1351      Cammeo\n3591    Osmancik\n246       Cammeo\n          ...   \n1130      Cammeo\n1294      Cammeo\n860       Cammeo\n3507    Osmancik\n3174    Osmancik\nName: Class, Length: 3048, dtype: object\n\n\n\n\n1.3.2 Normalisasi Data\nNormalisasi data dengan Min-Max Scaling adalah suatu teknik transformasi pada data numerik sehingga nilai-nilai tersebut dapat diubah ke dalam rentang yang lebih kecil, biasanya antara 0 dan 1. Rumus Min-Max Scaling untuk suatu nilai (x) dalam rentang asal ([a, b]) menjadi nilai dalam rentang baru ([c, d]) adalah sebagai berikut: \\[\n\\\n\\text{Scaled Value} = \\frac{x - a}{b - a} \\times (d - c) + c\n\\\n\\] Dengan penjelasan sebagai berikut:\n\n(x) adalah nilai asli dari fitur.\n(a) adalah nilai minimum dalam rentang asal.\n(b) adalah nilai maksimum dalam rentang asal.\n(c) adalah nilai minimum dalam rentang baru.\n(d) adalah nilai maksimum dalam rentang baru.\n\nProses normalisasi ini akan membantu mencegah perbedaan skala antar fitur, yang dapat meningkatkan performa model machine learning, terutama untuk model-model yang sensitif terhadap skala seperti Support Vector Machines (SVM) atau k-Nearest Neighbors (kNN).\n\n# Normalisasi data\nscaler = MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)"
  },
  {
    "objectID": "Rice_PSD.html#modelling",
    "href": "Rice_PSD.html#modelling",
    "title": "1  Rice (Cammeo and Osmancik)",
    "section": "1.4 Modelling",
    "text": "1.4 Modelling\n\n1.4.1 Support Vector Machine (SVM)\nSupport Vector Machine (SVM) adalah model klasifikasi yang mencoba menemukan hyperplane terbaik yang memisahkan dua kelas dalam ruang fitur. Fungsi keputusan SVM dapat dinyatakan sebagai:\n\\[\nf(x) = \\text{sign}(\\mathbf{w} \\cdot \\mathbf{x} + b)\n\\]\n\n\\(\\mathbf{w}\\) adalah vektor bobot,\n\\(\\mathbf{x}\\) adalah vektor fitur input,\n\\(b\\) adalah bias, dan\n\\(\\text{sign}\\) adalah fungsi tanda.\n\n\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Inisialisasi model SVM\nsvm_model = SVC(kernel='linear', random_state=42)\n\n# Latih model SVM\nsvm_model.fit(X_train_scaled, y_train)\n\n# Prediksi data uji\nsvm_predictions = svm_model.predict(X_test_scaled)\n\n# Evaluasi model\nsvm_accuracy = accuracy_score(y_test, svm_predictions)\nsvm_classification_report = classification_report(y_test, svm_predictions)\nsvm_confusion_matrix = confusion_matrix(y_test, svm_predictions)\n\n# Tampilkan hasil evaluasi\nprint(f'Accuracy of SVM: {svm_accuracy}')\n\nAccuracy of SVM: 0.931758530183727\n\n\n\n\n1.4.2 Random Forest\nRandom Forest adalah model ensemble yang terdiri dari sejumlah besar pohon keputusan. Prediksi dari Random Forest diperoleh dengan menggabungkan prediksi dari setiap pohon. Fungsi keputusan Random Forest dapat dinyatakan sebagai:\n\\[\nf(x) = \\text{mode}(f_1(x), f_2(x), ..., f_N(x))\n\\]\n\n\\(f_i(x)\\) adalah fungsi keputusan pohon ke-\\(i\\), dan\n\\(\\text{mode}\\) adalah modus dari prediksi semua pohon.\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Inisialisasi model Random Forest\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Latih model Random Forest\nrf_model.fit(X_train_scaled, y_train)\n\n# Prediksi data uji\nrf_predictions = rf_model.predict(X_test_scaled)\n\n# Evaluasi model\nrf_accuracy = accuracy_score(y_test, rf_predictions)\nrf_classification_report = classification_report(y_test, rf_predictions)\nrf_confusion_matrix = confusion_matrix(y_test, rf_predictions)\n\n# Tampilkan hasil evaluasi\nprint(f'Accuracy of Random Forest: {rf_accuracy}')\n\nAccuracy of Random Forest: 0.916010498687664\n\n\n\n\n1.4.3 Neural Network\nJaringan Saraf Tiruan (Neural Network) adalah model yang terdiri dari lapisan-lapisan neuron yang saling terhubung. Fungsi keputusan untuk jaringan saraf tiruan dapat dinyatakan sebagai:\n\\[\nf(x) = \\text{softmax}(\\mathbf{W}_2 \\cdot \\text{ReLU}(\\mathbf{W}_1 \\cdot \\mathbf{x} + \\mathbf{b}_1) + \\mathbf{b}_2)\n\\]\n\n\\(\\mathbf{W}_1\\) dan \\(\\mathbf{W}_2\\) adalah matriks bobot,\n\\(\\mathbf{b}_1\\) dan \\(\\mathbf{b}_2\\) adalah vektor bias,\n\\(\\mathbf{x}\\) adalah vektor fitur input,\n\\(\\text{ReLU}\\) adalah fungsi aktivasi ReLU, dan\n\\(\\text{softmax}\\) adalah fungsi aktivasi softmax.\n\n\nfrom sklearn.neural_network import MLPClassifier\n\n# Inisialisasi model Neural Network\nnn_model = MLPClassifier(hidden_layer_sizes=(64, 32), max_iter=1000, random_state=42)\n\n# Latih model Neural Network\nnn_model.fit(X_train_scaled, y_train)\n\n# Prediksi data uji\nnn_predictions = nn_model.predict(X_test_scaled)\n\n# Evaluasi model\nnn_accuracy = accuracy_score(y_test, nn_predictions)\nnn_classification_report = classification_report(y_test, nn_predictions)\nnn_confusion_matrix = confusion_matrix(y_test, nn_predictions)\n\n# Tampilkan hasil evaluasi\nprint(f'Accuracy of Neural Network: {nn_accuracy}')\n\nAccuracy of Neural Network: 0.9278215223097113"
  },
  {
    "objectID": "Rice_PSD.html#evaluasi",
    "href": "Rice_PSD.html#evaluasi",
    "title": "1  Rice (Cammeo and Osmancik)",
    "section": "1.5 Evaluasi",
    "text": "1.5 Evaluasi\nAkurasi yang tertinggi yang saya dapat dari hasil yang sudah dibuat adalah SVM\n\nprint(\"Accuracy of SVM:\",svm_accuracy)\nprint(\"Accuracy of Random Forest:\", rf_accuracy)\nprint(\"Accuracy of Neural Network:\", nn_accuracy)\n\nAccuracy of SVM: 0.931758530183727\nAccuracy of Random Forest: 0.916010498687664\nAccuracy of Neural Network: 0.9278215223097113\n\n\n\nimport matplotlib.pyplot as plt\n\n# Data akurasi\nmodels = ['SVM', 'Random Forest', 'Neural Network']\naccuracies = [svm_accuracy, rf_accuracy, nn_accuracy]\n\n# Membuat diagram batang\nplt.figure(figsize=(10, 6))\nplt.bar(models, accuracies, color=['blue', 'orange', 'green', 'purple'])\nplt.ylim(0, 1)  # Menetapkan batas y-axis antara 0 dan 1\nplt.title('Akurasi Model Klasifikasi')\nplt.xlabel('Model')\nplt.ylabel('Akurasi')\nplt.show()\n\n\n\n\nSave Model\n\nimport joblib\njoblib.dump(svm_model, '/content/drive/MyDrive/Proyek Sain Data/Model/svm_model.pkl')\n\n['/content/drive/MyDrive/Proyek Sain Data/Model/svm_model.pkl']"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  }
]